import React, { useState, useEffect } from 'react';
import { Button } from './ui/button';
import { Card } from './ui/card';
import { Textarea } from './ui/textarea';
import { ArrowLeft, Play, Pause, Square, Volume2, VolumeX, ChevronRight } from 'lucide-react';
import type { Screen } from '../types';

interface CalmDownSessionProps {
  navigateTo: (screen: Screen) => void;
}

export function CalmDownSession({ navigateTo }: CalmDownSessionProps) {
  const [currentStep, setCurrentStep] = useState(0);
  const [isActive, setIsActive] = useState(false);
  const [timeLeft, setTimeLeft] = useState(120); // 2 minutes for breathing
  const [phase, setPhase] = useState<'inhale' | 'hold' | 'exhale'>('inhale');
  const [cycleCount, setCycleCount] = useState(0);
  const [journalText, setJournalText] = useState('');
  const [soundEnabled, setSoundEnabled] = useState(true);
  const [selectedSoundscape, setSelectedSoundscape] = useState('rain');

  const breathingCycle = {
    inhale: 4,
    hold: 4,
    exhale: 6
  };

  const steps = [
    { title: '‡§∏‡§æ‡§Ç‡§∏ ‡§≤‡•á‡§®‡§æ / Breathing', subtitle: '‡§ó‡§π‡§∞‡•Ä ‡§∏‡§æ‡§Ç‡§∏ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç / Let\'s start with deep breathing' },
    { title: '‡§ó‡•ç‡§∞‡§æ‡§â‡§Ç‡§°‡§ø‡§Ç‡§ó / Grounding', subtitle: '5-4-3-2-1 ‡§§‡§ï‡§®‡•Ä‡§ï / 5-4-3-2-1 technique' },
    { title: '‡§ú‡§∞‡•ç‡§®‡§≤‡§ø‡§Ç‡§ó / Journaling', subtitle: '‡§Ö‡§™‡§®‡•á ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§≤‡§ø‡§ñ‡•á‡§Ç / Write your thoughts' },
    { title: '‡§∂‡§æ‡§Ç‡§§ ‡§Ü‡§µ‡§æ‡§ú‡§º‡•á‡§Ç / Soundscape', subtitle: '‡§Ü‡§∞‡§æ‡§Æ‡§¶‡§æ‡§Ø‡§ï ‡§Ü‡§µ‡§æ‡§ú‡§º‡•á‡§Ç ‡§∏‡•Å‡§®‡•á‡§Ç / Listen to calming sounds' },
    { title: '‡§∏‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§∏‡•ã‡§ö / Reflection', subtitle: '‡§Ö‡§™‡§®‡•Ä ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§¶‡•á‡§ñ‡•á‡§Ç / Reflect on your progress' }
  ];

  const soundscapes = [
    { id: 'rain', name: '‡§¨‡§æ‡§∞‡§ø‡§∂ / Rain', emoji: 'üåßÔ∏è' },
    { id: 'forest', name: '‡§ú‡§Ç‡§ó‡§≤ / Forest', emoji: 'üå≤' },
    { id: 'ocean', name: '‡§∏‡§Æ‡•Å‡§¶‡•ç‡§∞ / Ocean', emoji: 'üåä' },
    { id: 'birds', name: '‡§™‡§ï‡•ç‡§∑‡•Ä / Birds', emoji: 'üê¶' }
  ];

  const groundingItems = [
    { count: 5, type: '‡§ö‡•Ä‡§ú‡§º‡•á‡§Ç ‡§ú‡•ã ‡§Ü‡§™ ‡§¶‡•á‡§ñ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç / Things you can see' },
    { count: 4, type: '‡§ö‡•Ä‡§ú‡§º‡•á‡§Ç ‡§ú‡•ã ‡§Ü‡§™ ‡§õ‡•Ç ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç / Things you can touch' },
    { count: 3, type: '‡§Ü‡§µ‡§æ‡§ú‡§º‡•á‡§Ç ‡§ú‡•ã ‡§Ü‡§™ ‡§∏‡•Å‡§® ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç / Sounds you can hear' },
    { count: 2, type: '‡§ñ‡•Å‡§∂‡§¨‡•Ç ‡§ú‡•ã ‡§Ü‡§™ ‡§∏‡•Ç‡§Ç‡§ò ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç / Scents you can smell' },
    { count: 1, type: '‡§∏‡•ç‡§µ‡§æ‡§¶ ‡§ú‡•ã ‡§Ü‡§™ ‡§ö‡§ñ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç / Taste you can notice' }
  ];

  const positiveReflections = [
    "‡§Ü‡§™‡§®‡•á ‡§Ü‡§ú ‡§Ö‡§™‡§®‡•Ä ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§Æ‡§Ø ‡§®‡§ø‡§ï‡§æ‡§≤‡§æ ‡§π‡•à‡•§ ‡§Ø‡§π ‡§¨‡§π‡•Å‡§§ ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§π‡•à‡•§ / You took time for self-care today. This is very important.",
    "‡§π‡§∞ ‡§ó‡§π‡§∞‡•Ä ‡§∏‡§æ‡§Ç‡§∏ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ü‡§™ ‡§∂‡§æ‡§Ç‡§§‡§ø ‡§ï‡•á ‡§ï‡§∞‡•Ä‡§¨ ‡§Ü ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§ / With every deep breath, you're getting closer to peace.",
    "‡§Ø‡§π ‡§ï‡§†‡§ø‡§® ‡§∏‡§Æ‡§Ø ‡§≠‡•Ä ‡§ó‡•Å‡§ú‡§º‡§∞ ‡§ú‡§æ‡§è‡§ó‡§æ‡•§ ‡§Ü‡§™ ‡§Æ‡§ú‡§¨‡•Ç‡§§ ‡§π‡•à‡§Ç‡•§ / This difficult time will also pass. You are strong.",
    "‡§Ü‡§™‡§ï‡•Ä ‡§≠‡§æ‡§µ‡§®‡§æ‡§è‡§Ç ‡§∏‡§π‡•Ä ‡§π‡•à‡§Ç, ‡§î‡§∞ ‡§Ü‡§™ ‡§Ö‡§ï‡•á‡§≤‡•á ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç‡•§ / Your feelings are valid, and you are not alone."
  ];

  useEffect(() => {
    let interval: NodeJS.Timeout;
    
    if (isActive && timeLeft > 0) {
      interval = setInterval(() => {
        setTimeLeft(timeLeft => timeLeft - 1);
      }, 1000);
    }
    
    return () => clearInterval(interval);
  }, [isActive, timeLeft]);

  useEffect(() => {
    if (timeLeft === 0) {
      setIsActive(false);
    }
  }, [timeLeft]);

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const handleStart = () => {
    setIsActive(true);
  };

  const handlePause = () => {
    setIsActive(false);
  };

  const handleReset = () => {
    setIsActive(false);
    setTimeLeft(120);
    setCycleCount(0);
    setPhase('inhale');
  };

  const handleNextStep = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1);
      if (currentStep === 0) {
        setIsActive(false); // Stop breathing when moving to next step
      }
    } else {
      // Session complete
      navigateTo('home');
    }
  };

  const getPhaseInstruction = () => {
    switch (phase) {
      case 'inhale':
        return '‡§ß‡•Ä‡§∞‡•á-‡§ß‡•Ä‡§∞‡•á ‡§∏‡§æ‡§Ç‡§∏ ‡§≤‡•á‡§Ç / Breathe in slowly...';
      case 'hold':
        return '‡§∏‡§æ‡§Ç‡§∏ ‡§∞‡•ã‡§ï‡•á‡§Ç / Hold your breath...';
      case 'exhale':
        return '‡§Ü‡§∞‡§æ‡§Æ ‡§∏‡•á ‡§∏‡§æ‡§Ç‡§∏ ‡§õ‡•ã‡§°‡§º‡•á‡§Ç / Breathe out gently...';
    }
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 0: // Breathing
        return (
          <div className="text-center">
            <div className="mb-8 flex justify-center">
              <div 
                className={`w-32 h-32 rounded-full bg-primary/20 flex items-center justify-center transition-transform duration-1000 ${
                  isActive ? 'scale-110' : 'scale-100'
                }`}
              >
                <div 
                  className={`w-24 h-24 rounded-full bg-primary/30 transition-transform duration-2000 ${
                    isActive ? 'scale-90' : 'scale-100'
                  }`}
                />
              </div>
            </div>

            <div className="mb-8">
              <div className="text-4xl mb-2 text-primary">{formatTime(timeLeft)}</div>
              <p className="text-lg mb-2">{getPhaseInstruction()}</p>
              <p className="text-sm text-muted-foreground">
                {isActive ? `‡§∏‡§æ‡§Ç‡§∏ ‡§ö‡§ï‡•ç‡§∞ / Breathing cycle ${cycleCount + 1}` : '‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞ / Ready to begin'}
              </p>
            </div>

            <div className="flex justify-center space-x-4">
              {!isActive ? (
                <Button 
                  onClick={handleStart}
                  className="bg-primary hover:bg-primary/90"
                  size="lg"
                >
                  <Play className="w-5 h-5 mr-2" />
                  ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç / Start
                </Button>
              ) : (
                <Button 
                  onClick={handlePause}
                  variant="outline"
                  className="border-primary/30"
                  size="lg"
                >
                  <Pause className="w-5 h-5 mr-2" />
                  ‡§∞‡•ã‡§ï‡•á‡§Ç / Pause
                </Button>
              )}
              
              <Button 
                onClick={handleReset}
                variant="ghost"
                className="hover:bg-primary/10"
                size="lg"
              >
                <Square className="w-5 h-5 mr-2" />
                ‡§∞‡•Ä‡§∏‡•á‡§ü / Reset
              </Button>
            </div>
          </div>
        );

      case 1: // Grounding
        return (
          <div className="space-y-6">
            <div className="text-center mb-6">
              <h3 className="text-lg font-medium mb-2">5-4-3-2-1 ‡§ó‡•ç‡§∞‡§æ‡§â‡§Ç‡§°‡§ø‡§Ç‡§ó ‡§§‡§ï‡§®‡•Ä‡§ï</h3>
              <p className="text-muted-foreground">‡§Ö‡§™‡§®‡•á ‡§Ü‡§∏‡§™‡§æ‡§∏ ‡§ï‡•Ä ‡§ö‡•Ä‡§ú‡§º‡•ã‡§Ç ‡§™‡§∞ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç / Focus on things around you</p>
            </div>
            
            {groundingItems.map((item, index) => (
              <Card key={index} className="p-4 bg-card border-primary/20">
                <div className="flex items-center space-x-3">
                  <div className="w-8 h-8 bg-primary/20 rounded-full flex items-center justify-center">
                    <span className="font-medium text-primary">{item.count}</span>
                  </div>
                  <span className="text-sm">{item.type}</span>
                </div>
              </Card>
            ))}
            
            <div className="text-center mt-6">
              <p className="text-sm text-muted-foreground mb-4">
                ‡§Ö‡§™‡§®‡§æ ‡§∏‡§Æ‡§Ø ‡§≤‡•á‡§Ç ‡§î‡§∞ ‡§π‡§∞ ‡§ö‡•Ä‡§ú‡§º ‡§ï‡•ã ‡§Æ‡§π‡§∏‡•Ç‡§∏ ‡§ï‡§∞‡•á‡§Ç / Take your time and notice each thing
              </p>
            </div>
          </div>
        );

      case 2: // Journaling
        return (
          <div className="space-y-6">
            <div className="text-center mb-6">
              <h3 className="text-lg font-medium mb-2">‡§Ö‡§™‡§®‡•á ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡•á‡§Ç / Share Your Thoughts</h3>
              <p className="text-muted-foreground">‡§ú‡•ã ‡§≠‡•Ä ‡§Æ‡§® ‡§Æ‡•á‡§Ç ‡§π‡•à, ‡§¨‡•á‡§ù‡§ø‡§ù‡§ï ‡§≤‡§ø‡§ñ‡•á‡§Ç / Write freely whatever comes to mind</p>
            </div>
            
            <Textarea
              value={journalText}
              onChange={(e) => setJournalText(e.target.value)}
              placeholder="‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Æ‡§π‡§∏‡•Ç‡§∏ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å... / Today I am feeling..."
              className="min-h-32 resize-none border-primary/20 focus:border-primary/40"
            />
            
            <div className="text-center">
              <p className="text-xs text-muted-foreground">
                ‡§Ü‡§™‡§ï‡•á ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§π‡•à‡§Ç ‡§î‡§∞ ‡§ï‡•á‡§µ‡§≤ ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à‡§Ç / Your thoughts are safe and private
              </p>
            </div>
          </div>
        );

      case 3: // Soundscape
        return (
          <div className="space-y-6">
            <div className="text-center mb-6">
              <h3 className="text-lg font-medium mb-2">‡§∂‡§æ‡§Ç‡§§ ‡§Ü‡§µ‡§æ‡§ú‡§º‡•á‡§Ç / Calming Sounds</h3>
              <p className="text-muted-foreground">‡§Ü‡§∞‡§æ‡§Æ‡§¶‡§æ‡§Ø‡§ï ‡§Ü‡§µ‡§æ‡§ú‡§º ‡§ö‡•Å‡§®‡•á‡§Ç / Choose a relaxing sound</p>
            </div>
            
            <div className="grid grid-cols-2 gap-3">
              {soundscapes.map((sound) => (
                <Card
                  key={sound.id}
                  className={`p-4 cursor-pointer transition-all ${
                    selectedSoundscape === sound.id
                      ? 'bg-primary/20 border-primary'
                      : 'bg-card border-primary/20 hover:border-primary/40'
                  }`}
                  onClick={() => setSelectedSoundscape(sound.id)}
                >
                  <div className="text-center space-y-2">
                    <span className="text-2xl">{sound.emoji}</span>
                    <p className="text-sm font-medium">{sound.name}</p>
                  </div>
                </Card>
              ))}
            </div>
            
            <div className="flex justify-center">
              <Button
                variant="outline"
                onClick={() => setSoundEnabled(!soundEnabled)}
                className="border-primary/30"
              >
                {soundEnabled ? <Volume2 className="w-4 h-4 mr-2" /> : <VolumeX className="w-4 h-4 mr-2" />}
                {soundEnabled ? '‡§Ü‡§µ‡§æ‡§ú‡§º ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç / Mute' : '‡§Ü‡§µ‡§æ‡§ú‡§º ‡§ö‡§æ‡§≤‡•Ç ‡§ï‡§∞‡•á‡§Ç / Unmute'}
              </Button>
            </div>
          </div>
        );

      case 4: // Reflection
        return (
          <div className="space-y-6 text-center">
            <div className="mb-6">
              <h3 className="text-lg font-medium mb-2">‡§¨‡§π‡•Å‡§§ ‡§¨‡§¢‡§º‡§ø‡§Ø‡§æ! / Excellent!</h3>
              <p className="text-muted-foreground">‡§Ü‡§™‡§®‡•á ‡§Ö‡§™‡§®‡•Ä ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§Æ‡§Ø ‡§®‡§ø‡§ï‡§æ‡§≤‡§æ / You took time for self-care</p>
            </div>
            
            <Card className="p-6 bg-gradient-to-br from-primary/5 to-primary/10 border-primary/20">
              <p className="text-sm leading-relaxed text-center">
                {positiveReflections[Math.floor(Math.random() * positiveReflections.length)]}
              </p>
            </Card>
            
            <div className="space-y-3">
              <div className="flex items-center justify-center space-x-2">
                <span className="text-2xl">üåü</span>
                <span className="font-medium">‡§Ü‡§™‡§®‡•á ‡§è‡§ï calm-down session ‡§™‡•Ç‡§∞‡§æ ‡§ï‡§ø‡§Ø‡§æ!</span>
              </div>
              <p className="text-sm text-muted-foreground">
                ‡§Ø‡§π ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§Æ‡•á‡§Ç ‡§è‡§ï ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ï‡§¶‡§Æ ‡§π‡•à
              </p>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-background p-6">
      <div className="max-w-lg mx-auto">
        {/* Header */}
        <div className="flex items-center mb-8">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => navigateTo('home')}
            className="mr-4 hover:bg-primary/10"
          >
            <ArrowLeft className="w-4 h-4" />
          </Button>
          <div className="flex-1">
            <h1 className="text-xl">‡§∂‡§æ‡§Ç‡§§ ‡§π‡•ã‡§®‡•á ‡§ï‡§æ ‡§∏‡§§‡•ç‡§∞ / Calm-Down Session</h1>
            <p className="text-sm text-muted-foreground">
              ‡§ö‡§∞‡§£ {currentStep + 1} / {steps.length}: {steps[currentStep].title}
            </p>
          </div>
        </div>

        {/* Progress indicator */}
        <div className="mb-8">
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div 
              className="bg-primary h-2 rounded-full transition-all duration-300"
              style={{ width: `${((currentStep + 1) / steps.length) * 100}%` }}
            />
          </div>
        </div>

        {/* Step content */}
        <div className="mb-8">
          <Card className="p-8 bg-gradient-to-br from-primary/5 to-primary/10 border-primary/20">
            <div className="mb-6 text-center">
              <h2 className="text-lg font-medium mb-2">{steps[currentStep].title}</h2>
              <p className="text-muted-foreground text-sm">{steps[currentStep].subtitle}</p>
            </div>
            
            {renderStepContent()}
          </Card>
        </div>

        {/* Navigation */}
        <div className="flex justify-between">
          <Button
            variant="ghost"
            onClick={() => setCurrentStep(Math.max(0, currentStep - 1))}
            disabled={currentStep === 0}
            className="hover:bg-primary/10"
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            ‡§™‡•Ä‡§õ‡•á / Back
          </Button>
          
          <Button
            onClick={handleNextStep}
            className="bg-primary hover:bg-primary/90"
          >
            {currentStep === steps.length - 1 ? '‡§™‡•Ç‡§∞‡§æ / Complete' : '‡§Ü‡§ó‡•á / Next'}
            <ChevronRight className="w-4 h-4 ml-2" />
          </Button>
        </div>

        {/* Instructions for current step */}
        {currentStep === 0 && (
          <Card className="p-6 mt-6 bg-card border-primary/20">
            <h3 className="font-medium mb-4">‡§∏‡§æ‡§Ç‡§∏ ‡§≤‡•á‡§®‡•á ‡§ï‡•á ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂ / Breathing Instructions</h3>
            <div className="space-y-3 text-sm text-muted-foreground">
              <div className="flex items-center space-x-3">
                <div className="w-2 h-2 bg-primary rounded-full" />
                <span>‡§Ü‡§∞‡§æ‡§Æ‡§¶‡§æ‡§Ø‡§ï ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§Æ‡•á‡§Ç ‡§¨‡•à‡§†‡•á‡§Ç / Find a comfortable position</span>
              </div>
              <div className="flex items-center space-x-3">
                <div className="w-2 h-2 bg-primary rounded-full" />
                <span>4 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§§‡§ï ‡§®‡§æ‡§ï ‡§∏‡•á ‡§∏‡§æ‡§Ç‡§∏ ‡§≤‡•á‡§Ç / Breathe in through nose for 4 seconds</span>
              </div>
              <div className="flex items-center space-x-3">
                <div className="w-2 h-2 bg-primary rounded-full" />
                <span>4 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§∏‡§æ‡§Ç‡§∏ ‡§∞‡•ã‡§ï‡•á‡§Ç / Hold breath for 4 seconds</span>
              </div>
              <div className="flex items-center space-x-3">
                <div className="w-2 h-2 bg-primary rounded-full" />
                <span>6 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§§‡§ï ‡§Æ‡•Å‡§Ç‡§π ‡§∏‡•á ‡§∏‡§æ‡§Ç‡§∏ ‡§õ‡•ã‡§°‡§º‡•á‡§Ç / Exhale through mouth for 6 seconds</span>
              </div>
            </div>
          </Card>
        )}
      </div>
    </div>
  );
}